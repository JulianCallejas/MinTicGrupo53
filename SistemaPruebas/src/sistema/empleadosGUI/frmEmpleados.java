
package sistema.empleadosGUI;

import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import sistema.empleadosDAL.Conexion;
import sistema.empleadosBL.EmpleadosBL;

public class frmEmpleados extends javax.swing.JFrame {
    Map<Integer, EmpleadosBL> listaEmpleados = new HashMap<>();
    Boolean actualizaCombo = false;
    DefaultTableModel te;

    /**
     * Creates new form frmEmpleados
     */
    public frmEmpleados() {
        initComponents();
        //Editar tama√±o de la primera columna de la tabla
        te = (DefaultTableModel)tbEmpleados.getModel();
        TableColumn c1 = tbEmpleados.getColumnModel().getColumn(0);
        c1.setPreferredWidth(35);
        c1.setMaxWidth(70);
        c1.setMinWidth(15);
        //AGREGA CODIGO PARA ORDENAR POR COLUMNA
        TableRowSorter<TableModel> ordenarColumna = new TableRowSorter<TableModel>(te);
        tbEmpleados.setRowSorter(ordenarColumna);
        tbEmpleados.setAutoCreateRowSorter(true);
        actualizarComponentes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbEmpleados = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        txtId = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        comboBuscar = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setFocusTraversalPolicyProvider(true);

        tbEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Correo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbEmpleadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbEmpleados);
        tbEmpleados.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnBorrar.setText("Borrar");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtId.setToolTipText("");

        txtCorreo.setToolTipText("");

        jLabel1.setText("Id:");
        jLabel1.setToolTipText("");

        jLabel2.setText("Nombre:");

        jLabel3.setText("Correo:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Listado Empleados");

        jLabel5.setText("Buscar");

        comboBuscar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBuscarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(btnAgregar)
                                .addGap(73, 73, 73)
                                .addComponent(btnEditar)
                                .addGap(77, 77, 77)
                                .addComponent(btnBorrar)
                                .addGap(67, 67, 67)
                                .addComponent(btnCancelar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE)))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtCorreo)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                                    .addComponent(comboBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 87, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtCorreo, txtId, txtNombre});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAgregar, btnBorrar, btnCancelar, btnEditar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(comboBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnEditar)
                    .addComponent(btnBorrar)
                    .addComponent(btnCancelar))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, txtCorreo, txtId, txtNombre});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {comboBuscar, jLabel5});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        try {
            Integer idem = null;
            EmpleadosBL empleado = new EmpleadosBL();
            if (!txtId.getText().isEmpty()){
                idem = Integer.parseInt(txtId.getText());
                if (listaEmpleados.containsKey(idem)){
                    JOptionPane.showMessageDialog( null, "El id ya existe debe cambiarlo");
                    return;
                }
                empleado.setId(idem);
            }
            if (!txtNombre.getText().isEmpty()){
                if (!txtCorreo.getText().isEmpty()){
                    empleado.setNombre(txtNombre.getText());
                    empleado.setCorreo(txtCorreo.getText());

    //                Conexion objConexion = new Conexion();
    //                objConexion.ejecutarSentenciaSQL("INSERT INTO Empleados(IdEmpleado, Nombre, Correo)\n"
    //                        + "VALUES ("+ idem + ",\n"
    //                        + "'"+ empleado.getNombre() +"',\n"
    //                        + "'"+ empleado.getCorreo() +"'\n"
    //                        + ")");

                    empleado.agregarEmpleado();
                    actualizarComponentes();
                }else{
                    JOptionPane.showMessageDialog( null, "Ingrese el correo del empleado");
                }
            }else{
                JOptionPane.showMessageDialog( null, "Ingrese el nombre del empleado");
            }
        } catch (Exception e) {
        System.out.println("Error " + e);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void tbEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbEmpleadosMouseClicked
        int reg = tbEmpleados.rowAtPoint(evt.getPoint());
        Integer cod = Integer.parseInt(tbEmpleados.getValueAt(reg, 0).toString());

//        txtId.setText(String.valueOf(tbEmpleados.getValueAt(reg, 0)));
//        txtNombre.setText(String.valueOf(tbEmpleados.getValueAt(reg, 1)));
//        txtCorreo.setText(String.valueOf(tbEmpleados.getValueAt(reg, 2)));
        
        txtId.setText(String.valueOf(listaEmpleados.get(cod).getId()));
        txtNombre.setText(listaEmpleados.get(cod).getNombre());
        txtCorreo.setText(listaEmpleados.get(cod).getCorreo());
        
    }//GEN-LAST:event_tbEmpleadosMouseClicked

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        try {
            if (!txtId.getText().isEmpty()){
                Integer idem = Integer.parseInt(txtId.getText());
                if (listaEmpleados.containsKey(idem)){
                    if (!txtNombre.getText().isEmpty()) {
                        listaEmpleados.get(idem).setNombre(txtNombre.getText());
                    }
                    if (!txtCorreo.getText().isEmpty()) {
                        listaEmpleados.get(idem).setCorreo(txtCorreo.getText());
                    }

    //                Conexion objConexion = new Conexion();
    //                objConexion.ejecutarSentenciaSQL("UPDATE Empleados \n" +
    //                                                "SET Nombre = '" + listaEmpleados.get(idem).getNombre() + " ', \n" +
    //                                                "Correo = '" + listaEmpleados.get(idem).getCorreo() + "'\n" +
    //                                                "WHERE IdEmpleado = " + listaEmpleados.get(idem).getId() + ";");
                    listaEmpleados.get(idem).editarEmpleado();
                    actualizarComponentes();

                }else{
                    JOptionPane.showMessageDialog(null, "El Id no existe, ingrese un Id v√°lido");
                }
            }
        } catch (Exception e) {
        System.out.println("Error " + e);
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        try {
            if (!txtId.getText().isEmpty()){
                Integer idem = Integer.parseInt(txtId.getText());
                if (listaEmpleados.containsKey(idem)){
                    var confirma = JOptionPane.showConfirmDialog(null, "¬øEliminar el registro definitivamente?");
                    if (confirma == 0){
                        listaEmpleados.get(idem).eliminaEmpleado();
                        actualizarComponentes();
                    }

                }else{
                    JOptionPane.showMessageDialog(null, "El Id no existe, ingrese un Id v√°lido");
                }
            }else{
                JOptionPane.showMessageDialog(null, "El Id no existe, ingrese un Id v√°lido");
            }
                
        } catch (Exception e) {
            System.out.println("Error " + e);
        } 
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        this.dispose();
        System.exit(0);
        
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void comboBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBuscarActionPerformed
        if (!actualizaCombo){
            if (comboBuscar.getItemCount() > 0){
                String seleccion;
                String[] datos = new String[2];
                seleccion = comboBuscar.getSelectedItem().toString();
                int cod = Integer.parseInt(seleccion.split("-")[1]);
                txtId.setText(String.valueOf(cod));
                txtNombre.setText(listaEmpleados.get(cod).getNombre());
                txtCorreo.setText(listaEmpleados.get(cod).getCorreo());
            }
        }
    }//GEN-LAST:event_comboBuscarActionPerformed
   
    
    public final void cargarTbEmpleados(){
        try {
//        DefaultTableModel te = (DefaultTableModel)tbEmpleados.getModel();
        te.setRowCount(0);
        //Editar tama√±o de la primera columna de la tabla
//        TableColumn c1 = tbEmpleados.getColumnModel().getColumn(0);
//        c1.setPreferredWidth(35);
//        c1.setMaxWidth(70);
//        c1.setMinWidth(15);
                
        Conexion objConexion = new Conexion();
        ResultSet datos = objConexion.ejecutarConsultaSQL("SELECT * FROM Empleados");
            listaEmpleados.clear();
            while(datos.next()){
//                Vector v = new Vector();
//                v.add(datos.getInt(1));
//                v.add(datos.getString(2));
//                v.add(datos.getString(3));
                EmpleadosBL empleado = new EmpleadosBL();
                empleado.setId(datos.getInt(1)); 
                empleado.setNombre(datos.getString(2));
                empleado.setCorreo(datos.getString(3));
                listaEmpleados.put(empleado.getId(), empleado);
                te.addRow(empleado.getDatosTabla());
            }
            tbEmpleados.setModel(te);
            //AGREGA CODIGO PARA ORDENAR POR COLUMNA
//            TableRowSorter<TableModel> ordenarColumna = new TableRowSorter<TableModel>(te);
//            tbEmpleados.setRowSorter(ordenarColumna);
//            tbEmpleados.setAutoCreateRowSorter(true);
        } catch (Exception e) {
            System.out.println("Error " + e);
        }
        
    }
    
    public final void cargarComboBuscar(){
        try {
            Conexion objConexion = new Conexion();
            ResultSet datos = objConexion.ejecutarConsultaSQL("SELECT (Nombre || '-' || IdEmpleado) AS NombreId FROM Empleados ORDER BY Nombre;");
            comboBuscar.removeAllItems();
            while(datos.next()){
                comboBuscar.addItem(datos.getString(4));
            }
        } catch (Exception e) {
            System.out.println("Error " + e);
        }
    }
    
    public final void actualizarComponentes(){
//        actualizaCombo = true;
//        cargarTbEmpleados();
//        cargarComboBuscar();
//        actualizaCombo = false;
        try {
            Conexion objConexion = new Conexion();
            ResultSet datos = objConexion.ejecutarConsultaSQL("SELECT *, (Nombre || '-' || IdEmpleado) AS NombreId  FROM Empleados");
            actualizaCombo = true;
            te.setRowCount(0);
            listaEmpleados.clear();
            comboBuscar.removeAllItems();
            while (datos.next()) {
                EmpleadosBL empleado = new EmpleadosBL();
                empleado.setId(datos.getInt(1));
                empleado.setNombre(datos.getString(2));
                empleado.setCorreo(datos.getString(3));
                listaEmpleados.put(empleado.getId(), empleado);
                te.addRow(empleado.getDatosTabla());
                comboBuscar.addItem(datos.getString(4));
            }
            tbEmpleados.setModel(te);
            actualizaCombo = false;
        
        } catch (Exception e) {
            System.out.println("Error " + e);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmEmpleados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new frmEmpleados().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JComboBox<String> comboBuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbEmpleados;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
    
}

